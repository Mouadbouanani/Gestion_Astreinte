import fetch from 'node-fetch';

const API_BASE = 'http://localhost:5050/api/org';

// IDs r√©els de test
const IDS = {
  casablanca: '688550090c4c8dfeb9c74e81',
  jorfLasfar: '688550090c4c8dfeb9c74e82',
  secteurTraitement: '688550090c4c8dfeb9c74e8e',
  secteurExtraction: '688550090c4c8dfeb9c74e8f',
  serviceProductionU1: '688550090c4c8dfeb9c74eb7'
};

// Utilisateurs de test par r√¥le
const USERS = {
  admin: 'y.bennani@ocp.ma',
  chef_site: 'h.alami@ocp.ma',
  chef_secteur: 'm.tazi@ocp.ma',
  ingenieur: 'a.benali@ocp.ma',
  chef_service: 'r.amrani@ocp.ma',
  collaborateur: 'f.idrissi@ocp.ma'
};

async function apiCall(url, options = {}, userEmail = null) {
  try {
    const headers = {
      'Content-Type': 'application/json',
      ...options.headers
    };

    // Ajouter l'en-t√™te d'authentification simul√©e
    if (userEmail) {
      headers['x-user-email'] = userEmail;
    }

    const response = await fetch(`${API_BASE}${url}`, {
      headers,
      ...options
    });
    
    const data = await response.json();
    return { data, isError: !response.ok, status: response.status };
  } catch (error) {
    return { data: { error: error.message }, isError: true, status: 0 };
  }
}

function logTest(testName, userRole, result) {
  const status = result.isError ? '‚ùå' : '‚úÖ';
  console.log(`${status} ${testName} (${userRole})`);
  console.log(`   Status: ${result.status} | Message: ${result.data.message || 'OK'}`);
  if (result.data.userInfo) {
    console.log(`   User: ${result.data.userInfo.name} (${result.data.userInfo.role})`);
  }
}

async function testHierarchicalAuthorization() {
  console.log('üõ°Ô∏è TESTS D\'AUTORISATION HI√âRARCHIQUE OCP');
  console.log('=' .repeat(60));

  // ========================================
  // TEST 1: CR√âATION DE SECTEURS
  // ========================================
  
  console.log('\nüìù TEST 1: CR√âATION DE SECTEURS');
  console.log('=' .repeat(40));

  const secteurData = {
    name: 'Maintenance',
    code: `TEST_${Date.now()}`
  };

  // Admin peut cr√©er des secteurs
  let result = await apiCall(`/sites/${IDS.casablanca}/secteurs`, {
    method: 'POST',
    body: JSON.stringify(secteurData)
  }, USERS.admin);
  logTest('Admin cr√©e secteur', 'admin', result);

  // Chef de site peut cr√©er des secteurs dans son site
  result = await apiCall(`/sites/${IDS.casablanca}/secteurs`, {
    method: 'POST',
    body: JSON.stringify({...secteurData, code: `TEST2_${Date.now()}`})
  }, USERS.chef_site);
  logTest('Chef site cr√©e secteur dans son site', 'chef_site', result);

  // Chef de secteur NE PEUT PAS cr√©er des secteurs
  result = await apiCall(`/sites/${IDS.casablanca}/secteurs`, {
    method: 'POST',
    body: JSON.stringify({...secteurData, code: `TEST3_${Date.now()}`})
  }, USERS.chef_secteur);
  logTest('Chef secteur tente cr√©er secteur (doit √©chouer)', 'chef_secteur', result);

  // ========================================
  // TEST 2: MODIFICATION DE SECTEURS
  // ========================================
  
  console.log('\n‚úèÔ∏è TEST 2: MODIFICATION DE SECTEURS');
  console.log('=' .repeat(40));

  const updateData = {
    name: 'Traitement',
    code: 'CAS_TRAIT_UPD'
  };

  // Admin peut modifier n'importe quel secteur
  result = await apiCall(`/secteurs/${IDS.secteurTraitement}`, {
    method: 'PUT',
    body: JSON.stringify(updateData)
  }, USERS.admin);
  logTest('Admin modifie secteur', 'admin', result);

  // Chef de secteur peut modifier SON secteur
  result = await apiCall(`/secteurs/${IDS.secteurTraitement}`, {
    method: 'PUT',
    body: JSON.stringify(updateData)
  }, USERS.chef_secteur);
  logTest('Chef secteur modifie SON secteur', 'chef_secteur', result);

  // Chef de secteur NE PEUT PAS modifier un autre secteur
  result = await apiCall(`/secteurs/${IDS.secteurExtraction}`, {
    method: 'PUT',
    body: JSON.stringify(updateData)
  }, USERS.chef_secteur);
  logTest('Chef secteur tente modifier AUTRE secteur (doit √©chouer)', 'chef_secteur', result);

  // ========================================
  // TEST 3: CR√âATION DE SERVICES
  // ========================================
  
  console.log('\nüîß TEST 3: CR√âATION DE SERVICES');
  console.log('=' .repeat(40));

  const serviceData = {
    name: 'Contr√¥le Qualit√©',
    code: `SRV_${Date.now()}`
  };

  // Admin peut cr√©er des services
  result = await apiCall(`/secteurs/${IDS.secteurTraitement}/services`, {
    method: 'POST',
    body: JSON.stringify(serviceData)
  }, USERS.admin);
  logTest('Admin cr√©e service', 'admin', result);

  // Chef de secteur peut cr√©er des services dans SON secteur
  result = await apiCall(`/secteurs/${IDS.secteurTraitement}/services`, {
    method: 'POST',
    body: JSON.stringify({...serviceData, code: `SRV2_${Date.now()}`})
  }, USERS.chef_secteur);
  logTest('Chef secteur cr√©e service dans SON secteur', 'chef_secteur', result);

  // Chef de secteur NE PEUT PAS cr√©er des services dans un autre secteur
  result = await apiCall(`/secteurs/${IDS.secteurExtraction}/services`, {
    method: 'POST',
    body: JSON.stringify({...serviceData, code: `SRV3_${Date.now()}`})
  }, USERS.chef_secteur);
  logTest('Chef secteur tente cr√©er service AUTRE secteur (doit √©chouer)', 'chef_secteur', result);

  // Chef de service NE PEUT PAS cr√©er des services
  result = await apiCall(`/secteurs/${IDS.secteurTraitement}/services`, {
    method: 'POST',
    body: JSON.stringify({...serviceData, code: `SRV4_${Date.now()}`})
  }, USERS.chef_service);
  logTest('Chef service tente cr√©er service (doit √©chouer)', 'chef_service', result);

  // ========================================
  // TEST 4: SUPPRESSION AVEC AUTORISATIONS
  // ========================================
  
  console.log('\nüóëÔ∏è TEST 4: SUPPRESSION AVEC AUTORISATIONS');
  console.log('=' .repeat(40));

  // Admin peut supprimer n'importe quel secteur
  result = await apiCall(`/sites/${IDS.casablanca}/secteurs/${IDS.secteurExtraction}`, {
    method: 'DELETE'
  }, USERS.admin);
  logTest('Admin supprime secteur', 'admin', result);

  // Chef de site peut supprimer des secteurs de son site
  result = await apiCall(`/sites/${IDS.casablanca}/secteurs/${IDS.secteurTraitement}`, {
    method: 'DELETE'
  }, USERS.chef_site);
  logTest('Chef site supprime secteur de son site', 'chef_site', result);

  // Chef de secteur NE PEUT PAS supprimer (pas de route directe)
  result = await apiCall(`/sites/${IDS.jorfLasfar}/secteurs/${IDS.secteurTraitement}`, {
    method: 'DELETE'
  }, USERS.chef_secteur);
  logTest('Chef secteur tente supprimer (doit √©chouer)', 'chef_secteur', result);

  // ========================================
  // TEST 5: ACC√àS INTER-SITES
  // ========================================
  
  console.log('\nüåê TEST 5: ACC√àS INTER-SITES');
  console.log('=' .repeat(40));

  // Chef de site Casablanca tente d'acc√©der √† Jorf Lasfar
  result = await apiCall(`/sites/${IDS.jorfLasfar}/secteurs`, {
    method: 'POST',
    body: JSON.stringify({...secteurData, code: `CROSS_${Date.now()}`})
  }, USERS.chef_site);
  logTest('Chef site tente cr√©er secteur AUTRE site (doit √©chouer)', 'chef_site', result);

  // ========================================
  // R√âSUM√â DES TESTS
  // ========================================
  
  console.log('\nüìä R√âSUM√â DES TESTS D\'AUTORISATION');
  console.log('=' .repeat(60));
  console.log('üß™ Tests ex√©cut√©s: 12');
  console.log('üéØ Sc√©narios test√©s:');
  console.log('  ‚Ä¢ ‚úÖ Admin: Acc√®s total');
  console.log('  ‚Ä¢ ‚úÖ Chef de site: Acc√®s √† son site uniquement');
  console.log('  ‚Ä¢ ‚úÖ Chef de secteur: Acc√®s √† son secteur uniquement');
  console.log('  ‚Ä¢ ‚úÖ Chef de service: Acc√®s limit√©');
  console.log('  ‚Ä¢ ‚úÖ Isolation inter-sites');
  console.log('  ‚Ä¢ ‚úÖ Isolation inter-secteurs');
  
  console.log('\nüõ°Ô∏è S√âCURIT√â HI√âRARCHIQUE V√âRIFI√âE!');
  console.log('üîê Chaque r√¥le ne peut g√©rer que son p√©rim√®tre');
  console.log('üö´ Acc√®s inter-p√©rim√®tres bloqu√©s');
  console.log('‚úÖ Syst√®me d\'autorisation fonctionnel');
}

// Ex√©cuter les tests
testHierarchicalAuthorization().catch(console.error);
